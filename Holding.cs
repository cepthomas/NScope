using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

// Leftove stuff to hang on to for a bit.


namespace NebScope
{
    #region Enums
    /// <summary></summary>
    public enum TriggerMode
    {
        Auto,     //> Automatic trigger can be implemented to finish acquisition at the mode when no valid trigger exists.
        Normal,   //> Only valid triggered waveform is checked at the mode. The waveform is acquired only when satisfying the trigger condition.
        Single    //> Acquire a waveform when detecting a single trigger, and then stop.
    };

    /// <summary></summary>
    public enum TriggerSlope
    {
        Rising,   //>
        Falling,  //>
        Both      //>
    }
    #endregion


    // this:
    // Collect at least one screen full.
    // Look for trigger condition.
    // If found, call MapData for both channels, redraw.

    // var mapped = ser.MapDataX(_dataRegion, _settings.XPosition, _settings.SampleRate * _settings.XTimePerDivision);



    public partial class Holding : Form
    {
        UserSettings _settings = new UserSettings();

        #region Properties - triggering
        // Others? these:
        // [FORCE] No matter whether the oscilloscope detects the trigger, the key can be pressed to
        // perform force trigger once so as to finish acquisition of the current waveform. The key
        // is mainly applied to “Normal” and “Single” in the trigger modes.
        //
        // Pre-trigger/delay trigger
        // The key is used for triggering the sampled data before/after the event.
        // The trigger position is generally set in the horizontal center of the screen, so that the
        // pre-trigger and delay information can be observed. The horizontal [POSITION] knob
        // can be further revolved to regulate horizontal displacement of the waveform so as to
        // check more pre-trigger information or delay trigger information. For instance, if burrs
        // generated by the circuit are caught, the causes of generation of the burrs may be found
        // out by observing and analyzing the pre-trigger data.
        // Attention: pre-trigger and delay trigger are invalid at a slow scan state.

        /// <summary></summary>
        public int TriggerChannel { get; set; } = 0;

        /// <summary></summary>
        public TriggerMode TriggerMode { get; set; } = TriggerMode.Normal;

        /// <summary></summary>
        public TriggerSlope TriggerSlope { get; set; } = TriggerSlope.Both;

        /// <summary>Value to start displaying.</summary>
        public double TriggerLevel { get; set; } = 0.0;
        #endregion

        /// <summary>
        /// When the time base is set to be 100ms/div or more slowly and the trigger mode is set to Auto,
        /// the oscilloscope enters the scan mode. At this mode, waveform display is renewed from left to right.
        /// At the mode, no waveform trigger or horizontal position control exist. The channel coupling should be
        /// set as direct current when a low-frequency signal is observed at the scan mode.
        /// </summary>
        //bool _scanMode = false;


        public Holding()
        {
            InitializeComponent();
        }

        private void Holding_Load(object sender, EventArgs e)
        {
            ///// Control visuals /////
            btnTrig0.ForeColor = _settings.ControlColor;
            btnTrig50Pct.ForeColor = _settings.ControlColor;

            potTrigLevel.ControlColor = _settings.ControlColor;

            selTrigChannel.ForeColor = _settings.ControlColor;
            selTrigMode.ForeColor = _settings.ControlColor;
            selTrigSlope.ForeColor = _settings.ControlColor;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnTrig_Click(object sender, EventArgs e)
        {
            //btnTrig0.Click += BtnTrig_Click;
            //btnTrig50Pct.Click += BtnTrig_Click;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Sel_SelectedValueChanged(object sender, EventArgs e)
        {
            //selTrigChannel.SelectedValueChanged += (object _, EventArgs __) => _settings.TriggerChannel = selTrigChannel.SelectedIndex;
            //selTrigMode.SelectedValueChanged += (object _, EventArgs __) => _settings.TriggerMode = (TriggerMode)selTrigChannel.SelectedIndex;
            //selTrigSlope.SelectedValueChanged += (object _, EventArgs __) => _settings.TriggerSlope = (TriggerSlope)selTrigChannel.SelectedIndex;
        }

    }
}
